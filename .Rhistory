plot (power~effs, type = "l", lwd = 3, xlab = "Effect Size (Slope)")
abline(h = 0.8, col = 2, lty= 3)
#MDE
mde <- (qnorm(1-alpha/2) + qnorm(1-beta)) * SE[2]
aa <- cbind(effs,power)
# Define model parameters:
m <- 50
n1 <- 3
n2 <- 2
rho <- 0.4
sigma <- 1
alpha <- 0.05
beta <- 0.2
#A sequence of effect sizes (slope) to calculate power for
effs = seq(0, 1, by = 0.001)
#construct the design matrix
x0 <- rep(1, 250)
x1 <- c(rep(c(0,0,0), 25), rep(c(0,0,1), 25), rep(c(1,0), 25), rep(c(1,1), 25))
X <- cbind(x0, x1)
#Set up covariance matrix
R01 = diag(n1)*(1-rho) + matrix(rep(1,n1*n1), ncol=n1)*rho
R02 = diag(n2)*(1-rho) + matrix(rep(1,n2*n2), ncol=n2)*rho
V1 = sigma*kronecker(diag(1,m), R01)
V2 = sigma*kronecker(diag(1,m), R02)
V = as.matrix(Matrix::bdiag(V1, V2))
#Covariance of beta_hat and standard errors
VCOV = solve (t(X)%*%solve(V)%*%X)
SE = sqrt (diag (VCOV))
power =  pnorm ( qnorm (alpha/2) + abs(effs)/SE[2])
plot (power~effs, type = "l", lwd = 3, xlab = "Effect Size (Slope)")
abline(h = 0.8, col = 2, lty= 3)
#MDE
mde <- (qnorm(1-alpha/2) + qnorm(1-beta)) * SE[2]
aa <- cbind(effs,power)
# Define model parameters:
m <- 50
n1 <- 3
n2 <- 2
rho <- 0.4
sigma <- 1
alpha <- 0.05
beta <- 0.2
#A sequence of effect sizes (slope) to calculate power for
effs = seq(0, 1, by = 0.001)
#construct the design matrix
x0 <- rep(1, 250)
x1 <- c(rep(c(0,0,0), 25), rep(c(0,0,1), 25), rep(c(1,0), 25), rep(c(1,1), 25))
X2 <- c(rep(c(1,2,3), 25), rep(c(1,2,3), 25), rep(c(1,3), 25), rep(c(1,3), 25)) #period
X <- cbind(x0, x1, X2)
#Set up covariance matrix
R01 = diag(n1)*(1-rho) + matrix(rep(1,n1*n1), ncol=n1)*rho
R02 = diag(n2)*(1-rho) + matrix(rep(1,n2*n2), ncol=n2)*rho
V1 = sigma*kronecker(diag(1,m), R01)
V2 = sigma*kronecker(diag(1,m), R02)
V = as.matrix(Matrix::bdiag(V1, V2))
#Covariance of beta_hat and standard errors
VCOV = solve (t(X)%*%solve(V)%*%X)
SE = sqrt (diag (VCOV))
power =  pnorm ( qnorm (alpha/2) + abs(effs)/SE[2])
plot (power~effs, type = "l", lwd = 3, xlab = "Effect Size (Slope)")
abline(h = 0.8, col = 2, lty= 3)
#MDE
mde <- (qnorm(1-alpha/2) + qnorm(1-beta)) * SE[2]
aa <- cbind(effs,power)
knitr::opts_chunk$set(echo = TRUE)
#load  baseline, 3month, 6month data into v0, v1, v2
load("D:/22fall/Capstone/ALS/Analysis Data/base.RData")
v0 <- data
load("D:/22fall/Capstone/ALS/Analysis Data/v1.RData")
v1 <- data
load("D:/22fall/Capstone/ALS/Analysis Data/v2.RData")
v2 <- data
rm(data)
#subtract numeric ID of paired patients at baseline
# load library
library(stringr)
# prepare regular expression
regexp <- "[[:digit:]]+"
# process string
v0$IDs_num <- as.numeric(str_extract(v0$IDs, regexp))
#count paired participants
library(dplyr)
c0 <- v0%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#subtract numeric ID of paired patients at 3 months
# process string
v1$IDs_num <- as.numeric(str_extract(v1$IDs, regexp))
#count paired participants
library(dplyr)
c1 <- v1%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#subtract numeric ID of paired patients at 3 months
# process string
v2$IDs_num <- as.numeric(str_extract(v2$IDs, regexp))
#count paired participants
library(dplyr)
c2 <- v2%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#merge v0 and v1
data1 <- merge(v0,v1,by.x=c("IDs"),by.y=c("IDs"))
View(c0)
toString(c0$IDs_num)
toString(c1$IDs_num)
knitr::opts_chunk$set(echo = TRUE)
#load  baseline, 3month, 6month data into v0, v1, v2
load("D:/22fall/Capstone/ALS/Analysis Data/base.RData")
v0 <- data
load("D:/22fall/Capstone/ALS/Analysis Data/v1.RData")
v1 <- data
load("D:/22fall/Capstone/ALS/Analysis Data/v2.RData")
v2 <- data
rm(data)
#subtract numeric ID of paired patients at baseline
# load library
library(stringr)
# prepare regular expression
regexp <- "[[:digit:]]+"
# process string
v0$IDs_num <- as.numeric(str_extract(v0$IDs, regexp))
#count paired participants
library(dplyr)
c0 <- v0%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#subtract numeric ID of paired patients at 3 months
# process string
v1$IDs_num <- as.numeric(str_extract(v1$IDs, regexp))
#count paired participants
library(dplyr)
c1 <- v1%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#subtract numeric ID of paired patients at 3 months
# process string
v2$IDs_num <- as.numeric(str_extract(v2$IDs, regexp))
#count paired participants
library(dplyr)
c2 <- v2%>%
group_by(IDs_num)%>%
count()%>%
filter(n==2)
#merge v0 and v1
data1 <- merge(v0,v1,by.x=c("IDs"),by.y=c("IDs"))
View(v0)
setwd("D:\22fall")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
here::i_am('engage_report.Rmd')
table1 <- readRDS(
here::here('output/table1.rds')
)
setwd("d/22fall/INFO550/W13/grp/info550.engage.group2")
install.packages("here", lib="C:/Program Files/R/R-4.2.1/library")
library(here)
xcode-select --install
here::i_am("code/plot.R")
knitr::opts_chunk$set(echo = TRUE)
# In- and Out-of-Sample Predictions
toe.jags2 <- function(){
# Data Likelihood
for(i in 1:n.obs){
response[i] ~ dnorm(mu[i], prec1)
mu[i] = alpha[id[i]] + beta1*treat[i] + beta2*time[i]
}
for(j in 1:n.id){ alpha[j] ~ dnorm(alpha0, prec2) }
# In-sample prediction
for(k in 1:n.id){
pred.mu_IN[k] = alpha[k] + beta1*2 + beta2*78
pred_IN[k] ~ dnorm(pred.mu_IN[k], prec1)
}
# Out-sample prediction
pred.alpha ~ dnorm(alpha0, prec2)
pred.mu_OUT = pred.alpha + beta1*2 + beta2*78
pred_OUT ~ dnorm(pred.mu_OUT, prec1)
# Priors
alpha0 ~ dnorm(0, 1E-10)
beta1 ~ dnorm(0, 1E-10)
beta2 ~ dnorm(0, 1E-10)
prec1 ~ dgamma(0.0001, 0.0001)
prec2 ~ dgamma(0.0001, 0.0001)
sigma2 = 1/prec1
tau2 = 1/prec2
}
toe.fit2 <- jags(data = list("response", "treat", "time", "id", "n.id", "n.obs"),
model.file = toe.jags2, DIC = FALSE, jags.seed = 2022,
parameters.to.save = c("pred_IN[1:2]", "pred_OUT"),
n.chain = 1, n.iter = 20000, n.burnin = 10000, n.thin = 4)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv(file = 'D:/22fall/BIOS525/HW4/wheeze.txt',sep = "")
#convert data to long format
library (tidyr)
df$subject <- as.numeric(row.names(df))
data1 = gather (df, key=sample, value = ms, c(age9, age10, age11, age12))
data2= gather (df, key=smk, value = smk_, c(smk9, smk10, smk11, smk12))
data3 = gather (df, key=whz, value = whz_, c(whz9, whz10, whz11, whz12))
data1$id <- factor(data1$id)
data1 = data1[order(data1$id, data1$ms),]
# load library
library(stringr)
# prepare regular expression
regexp <- "[[:digit:]]+"
#data2
data2$id <- factor(data2$id)
# process string
data2$order <- as.numeric(str_extract(data2$smk, regexp))
data2 = data2[order(data2$id, data2$order),]
#data3
data3$id <- factor(data3$id)
data3$order <- as.numeric(str_extract(data3$whz, regexp))
data3 = data3[order(data3$id, data3$order),]
data <- cbind(data1,data2$smk_,data3$whz_)
data$smk_<- data$`data2$smk_`
data$whz_<- data$`data3$whz_`
data$time = rep (c(9,10,11,12), 32)
library(dplyr)
#df2 <- data %>% select(id, city, time,smk_,whz_,ms)
df2 <- data
df2$smk_ <- factor(df2$smk_, levels = c(0,1,2),
labels = c("none", "moderate", "heavy"))
df2$city <- factor(df2$city, levels = c("portage", "kingston"),
labels = c("portage", "kingston"))
df2$whz_ <- factor(df2$whz_)
df2$smk1[df2$smk_=="none"] <- 1
df2$smk1[df2$smk_!="none"] <- 0
df2$smk2[df2$smk_=="moderate"] <- 1
df2$smk2[df2$smk_!="moderate"] <- 0
library(gee)
library(lme4)
fit1 <- gee(whz_~smk1+smk2+city+time,id=id,family=binomial,corstr="unstructured",data=df2)
sum1 <- summary(fit1)
coef1 <- sum1$coefficients
coef1 <- as.data.frame(coef1)
coef1$p <- 2*pnorm(-abs(coef1$`Robust z`))
row.names(coef1) <- c("Intercept $\\beta_0$", "$x_0$ none smoking $\\beta_1$", "$x_1$ moderate smoking $\\beta_2$", "$c_{kingston}$ $\\beta_3$","time $\\beta_4$")
coef1$OR <- exp(coef1$Estimate)
coef1$OR_low <- exp(coef1$Estimate-1.96*coef1$`Robust S.E.`)
coef1$OR_upper <- exp(coef1$Estimate+1.96*coef1$`Robust S.E.`)
`Odds Ratio(95% CI)` <- paste0(round(coef1$OR,3),"(", format(round(coef1$OR_low, 3), nsmall = 3),"," ,round(coef1$OR_upper,3),")")
coef1 <- round(coef1,3)
kk <- cbind(coef1,`Odds Ratio(95% CI)`)
kk <- subset(kk,select = -c(OR,OR_low,OR_upper))
knitr::kable(kk,booktabs=T)
knitr::kable(round(sum1$working.correlation,4),booktabs=T)
fit2 <- gee(whz_~smk1+smk2+city+time,id=id,family=binomial,corstr="AR-M",Mv=1, data=df2)
sum1 <- summary(fit2)
coef1 <- sum1$coefficients
coef1 <- as.data.frame(coef1)
coef1$p <- 2*pnorm(-abs(coef1$`Robust z`))
row.names(coef1) <- c("Intercept $\\beta_0$", "$x_0$ none smoking $\\beta_1$", "$x_1$ moderate smoking $\\beta_2$", "$c_{kingston}$ $\\beta_3$","time $\\beta_4$")
coef1$OR <- exp(coef1$Estimate)
coef1$OR_low <- exp(coef1$Estimate-1.96*coef1$`Robust S.E.`)
coef1$OR_upper <- exp(coef1$Estimate+1.96*coef1$`Robust S.E.`)
`Odds Ratio(95% CI)` <- paste0(round(coef1$OR,3),"(", format(round(coef1$OR_low, 3), nsmall = 3),"," ,round(coef1$OR_upper,3),")")
coef1 <- round(coef1,3)
kk <- cbind(coef1,`Odds Ratio(95% CI)`)
kk <- subset(kk,select = -c(OR,OR_low,OR_upper))
knitr::kable(kk,booktabs=T)
knitr::kable(round(sum1$working.correlation,4),booktabs=T)
#
# Assuming exchangeable correlation for the model,in which the observations within a subject are assumed to be equally correlated. The model estimates and working correlation matrix are shown below:
fit3 <- gee(whz_~smk1+smk2+city+time,id=id,family=binomial,corstr="exchangeable",data=df2)
sum1 <- summary(fit3)
coef1 <- sum1$coefficients
coef1 <- as.data.frame(coef1)
coef1$p <- 2*pnorm(-abs(coef1$`Robust z`))
row.names(coef1) <- c("Intercept $\\beta_0$", "$x_0$ none smoking $\\beta_1$", "$x_1$ moderate smoking $\\beta_2$", "$c_{kingston}$ $\\beta_3$","time $\\beta_4$")
coef1$OR <- exp(coef1$Estimate)
coef1$OR_low <- exp(coef1$Estimate-1.96*coef1$`Robust S.E.`)
coef1$OR_upper <- exp(coef1$Estimate+1.96*coef1$`Robust S.E.`)
`Odds Ratio(95% CI)` <- paste0(round(coef1$OR,3),"(", format(round(coef1$OR_low, 3), nsmall = 3),"," ,round(coef1$OR_upper,3),")")
coef1 <- round(coef1,3)
kk <- cbind(coef1,`Odds Ratio(95% CI)`)
kk <- subset(kk,select = -c(OR,OR_low,OR_upper))
knitr::kable(kk,booktabs=T)
knitr::kable(round(sum1$working.correlation,4),booktabs=T)
fit4 <- glm(whz_~smk1+smk2+city+time,family=binomial,data=df2)
sum4 <- summary(fit4)
sum4$coefficients <- round(sum4$coefficients,3)
row.names(sum4$coefficients) <- c("Intercept $\\beta_0$", "$x_0$ none smoking $\\beta_1$", "$x_1$ moderate smoking $\\beta_2$", "$c_{kingston}$ $\\beta_3$","time $\\beta_4$")
coef1 <- sum4$coefficients
coef1 <- as.data.frame(coef1)
coef1$OR <- exp(coef1$Estimate)
coef1$OR_low <- exp(coef1$Estimate-1.96*coef1$`Std. Error`)
coef1$OR_upper <- exp(coef1$Estimate+1.96*coef1$`Std. Error`)
`Odds Ratio(95% CI)` <- paste0(round(coef1$OR,3),"(", format(round(coef1$OR_low, 3), nsmall = 3),"," ,round(coef1$OR_upper,3),")")
coef1 <- round(coef1,3)
kk <- cbind(coef1,`Odds Ratio(95% CI)`)
kk <- subset(kk,select = -c(OR,OR_low,OR_upper))
knitr::kable(kk,booktabs=T)
dat_wide <- read.csv("D:/22fall/BIOS525/HW4/armd.csv")
#convert
library (tidyr)
dat = gather (dat_wide, key=sample, value = vs, c(visual0, visual4, visual12, visual24, visual52))
dat$sample <- factor(dat$sample,levels = c("visual0","visual4","visual12","visual24","visual52"))
dat = dat[order(dat$subject, dat$sample),]
dat$time = rep (c(0,4,12,24,52), 188)
#set placebo group as reference group
library(tidyverse)
dat <- dat%>%mutate(Trt = factor(treat.f, levels = c('Placebo', 'Active')))
# Load Packages -----------------------------------------------------------
library(tidyverse)
library(R2jags)
library(lme4)
# Random Intercept Model
dat.jags1 <- function(){
# Data Likelihood
for(i in 1:n.obs){
response[i] ~ dnorm(mu[i], prec1)
mu[i] = alpha[id[i]] + beta1*treat[i] + beta2*time[i]
}
for(j in 1:n.id){ alpha[j] ~ dnorm(alpha0, prec2) }
# Priors
alpha0 ~ dnorm(0, 1E-10)
beta1 ~ dnorm(0, 1E-10)
beta2 ~ dnorm(0, 1E-10)
prec1 ~ dgamma(0.0001, 0.0001)
prec2 ~ dgamma(0.0001, 0.0001)
sigma2 = 1/prec1
tau2 = 1/prec2
}
# JAGS data input
dat$id <- as.numeric(as.factor(dat$subject)) # Recode ID (so as to not skip any IDs)
response <- dat$vs
treat <- dat$Trt
time <- dat$time
id <- dat$id
n.id <- max(dat$id)
n.obs <- nrow(dat)
dat.fit1 <- jags(data = list("response", "treat", "time", "id", "n.id", "n.obs"),
model.file = dat.jags1, DIC = FALSE, jags.seed = 1234,
parameters.to.save = c("alpha0","beta1","beta2","sigma2","tau2","alpha[1:2]"),
n.chain = 1, n.iter = 20000, n.burnin = 10000, n.thin = 4)
dat.mcmc0 <- as.mcmc(dat.fit1)
dat.post0 <- data.frame(as.matrix(dat.mcmc0))
# Create versions without random intercepts for cleaner output
dat.mcmc1 <- as.mcmc(dat.post0[,c("alpha0","beta1","beta2","sigma2","tau2")])
dat.post1 <- data.frame(as.matrix(dat.mcmc1))
# Data frame of posterior samples
head(dat.post1)
# Assess convergence of posterior samples
plot(dat.mcmc1)
# Summarize posterior samples of parameters
summary(dat.mcmc1)
# Compare to frequentist model
dat.lmer <- lmer(response ~ (1|id) + Trt + time , data = dat)
summary(dat.lmer)
# Visualize pairwise joint posteriors
GGally::ggpairs(dat.post1, upper = list(continuous = "density"),
lower = list(continuous = "points"),
mapping = aes(alpha = 0.001)) +
theme_bw()
# 95% CrI of exp(beta1) - beta2
new.samp1 <- exp(dat.post1$beta1) - dat.post1$beta2
mean(new.samp1)
quantile(new.samp1, c(0.025, 0.975))
data.frame(Post = new.samp1) %>%
ggplot(aes(x = Post)) +
geom_histogram(fill = 'white', color = 'black') +
theme_bw() +
labs(title = 'Posterior Distribution of exp(beta1) - beta2')
# 95% CrI for ICC
dat.icc <- dat.post1$tau2 / (dat.post1$tau2 + dat.post1$sigma2)
mean(dat.icc)
quantile(dat.icc, c(0.025, 0.975))
#[1] 0.7449505
#      2.5%     97.5%
# 0.6965194 0.7889213
data.frame(Post = dat.icc) %>%
ggplot(aes(x = Post)) +
geom_histogram(fill = 'white', color = 'black') +
theme_bw() +
labs(title = 'Posterior Distribution of ICC')
# Summarize posterior samples of parameters
sum <- summary(dat.mcmc1)
sum$statistics <- round(sum$statistics,3)
kk <- sum$statistics
library(dplyr)
kk <- as.data.frame(kk)
kk$low <- kk$Mean-1.96*kk$`SD`
kk$low <- round(kk$low,3)
kk$upper <- kk$Mean+1.96*kk$`SD`
kk$upper <- round(kk$upper,3)
`95% Posterior Interval` <- paste0("(", format(kk$low, nsmall = 3),"," ,kk$upper,")")
kk <- cbind(kk,`95% Posterior Interval`)
kk <- subset(kk,select = -c(low,upper))
row.names(kk) <- c("Intercept $\\alpha_0$", "Treatment=Active $\\beta_1$", "time $\\beta_2$", "$\\sigma^2$","$\\tau^2$")
knitr::kable(kk,booktabs=T,caption ="Parameter Estimates for Bayesian Random Intercept Model",escape = FALSE)
# Compare to frequentist model
dat.lmer <- lmerTest::lmer(response ~ (1|id) + Trt + time , data = dat)
sum <- summary(dat.lmer)
aa <- sum$coefficients
row.names(aa) <- c("Intercept $\\beta_0$", "Treatment=Active $\\beta_1$", "time $\\beta_2$")
aa <- round(aa,3)
aa <- as.data.frame(aa)
aa<- aa%>%mutate(aa,`P-value` = ifelse(`Pr(>|t|)`<0.001, "<0.001", "0.198"))
aa <- subset(aa,select = -c(`Pr(>|t|)`))
##
aa$OR_low <- aa$Estimate-1.96*aa$`Std. Error`
aa$OR_upper <- aa$Estimate+1.96*aa$`Std. Error`
`Estimate(95% CI)` <- paste0(round(aa$Estimate,3),"(", format(round(aa$OR_low, 3), nsmall = 3),"," ,round(aa$OR_upper,3),")")
kk <- cbind(aa,`Estimate(95% CI)`)
kk <- subset(kk,select = -c(Estimate,OR_low,OR_upper))
##
col_order <- c("Estimate(95% CI)", "Std. Error", "df","t value",
"P-value")
kk2 <- kk[, col_order]
knitr::kable(kk2,"simple",caption ="Parameter Estimates for non-Bayesian Random Intercept Model",escape = FALSE)
# Assess convergence of posterior samples
plot(dat.mcmc1)
# Pr(ICC > 0.3)
#mean(dat.icc > 0.3)
data.frame(Post = dat.icc) %>%
ggplot(aes(x = Post)) +
geom_histogram(fill = 'white', color = 'black') +
geom_vline(xintercept = 0.3, color = 'red') +
theme_bw() +
labs(title = 'Posterior Distribution of ICC')
# Compare random intercepts for subjects 1 and 2
# mean(dat.post0$alpha.1. > dat.post0$alpha.2.)
# data.frame(post = c(dat.post0$alpha.1., dat.post0$alpha.2.),
#            id = rep(1:2, each = nrow(dat.post0))) %>%
#   ggplot(aes(x = post, fill = paste0('ID = ', id))) +
#   geom_histogram(alpha = 0.3, position = "identity") +
#   theme_bw() +
#   theme(legend.position = c(.1, .8)) +
#   labs(fill = 'ID')
# In- and Out-of-Sample Predictions
toe.jags2 <- function(){
# Data Likelihood
for(i in 1:n.obs){
response[i] ~ dnorm(mu[i], prec1)
mu[i] = alpha[id[i]] + beta1*treat[i] + beta2*time[i]
}
for(j in 1:n.id){ alpha[j] ~ dnorm(alpha0, prec2) }
# In-sample prediction
for(k in 1:n.id){
pred.mu_IN[k] = alpha[k] + beta1*2 + beta2*78
pred_IN[k] ~ dnorm(pred.mu_IN[k], prec1)
}
# Out-sample prediction
pred.alpha ~ dnorm(alpha0, prec2)
pred.mu_OUT = pred.alpha + beta1*2 + beta2*78
pred_OUT ~ dnorm(pred.mu_OUT, prec1)
# Priors
alpha0 ~ dnorm(0, 1E-10)
beta1 ~ dnorm(0, 1E-10)
beta2 ~ dnorm(0, 1E-10)
prec1 ~ dgamma(0.0001, 0.0001)
prec2 ~ dgamma(0.0001, 0.0001)
sigma2 = 1/prec1
tau2 = 1/prec2
}
toe.fit2 <- jags(data = list("response", "treat", "time", "id", "n.id", "n.obs"),
model.file = toe.jags2, DIC = FALSE, jags.seed = 2022,
parameters.to.save = c("pred_IN[1:2]", "pred_OUT"),
n.chain = 1, n.iter = 20000, n.burnin = 10000, n.thin = 4)
toe.mcmc2 <- as.mcmc(toe.fit2)
summary(toe.mcmc2)
sum <- summary(toe.mcmc2)
sum$statistics <- round(sum$statistics,3)
kk <- sum$statistics
library(dplyr)
kk <- as.data.frame(kk)
kk$low <- kk$Mean-1.96*kk$`Naive SE`
kk$low <- round(kk$low,3)
kk$upper <- kk$Mean+1.96*kk$`Naive SE`
kk$upper <- round(kk$upper,3)
`95% Posterior Interval` <- paste0("(", format(kk$low, nsmall = 3),"," ,kk$upper,")")
kk <- cbind(kk,`95% Posterior Interval`)
kk <- subset(kk,select = -c(low,upper))
row.names(kk) <- c("In-sample subject 1", "In-sample subject 2", "Out-of-sample subject 1")
knitr::kable(kk,booktabs=T)
# In- and Out-of-Sample Predictions
toe.jags2 <- function(){
# Data Likelihood
for(i in 1:n.obs){
response[i] ~ dnorm(mu[i], prec1)
mu[i] = alpha[id[i]] + beta1*treat[i] + beta2*time[i]
}
for(j in 1:n.id){ alpha[j] ~ dnorm(alpha0, prec2) }
# In-sample prediction
for(k in 1:n.id){
pred.mu_IN[k] = alpha[k] + beta1*2 + beta2*78
pred_IN[k] ~ dnorm(pred.mu_IN[k], prec1)
}
# Out-sample prediction
pred.alpha ~ dnorm(alpha0, prec2)
pred.mu_OUT = pred.alpha + beta1*2 + beta2*78
pred_OUT ~ dnorm(pred.mu_OUT, prec1)
# Priors
alpha0 ~ dnorm(0, 1E-10)
beta1 ~ dnorm(0, 1E-10)
beta2 ~ dnorm(0, 1E-10)
prec1 ~ dgamma(0.0001, 0.0001)
prec2 ~ dgamma(0.0001, 0.0001)
sigma2 = 1/prec1
tau2 = 1/prec2
}
toe.fit2 <- jags(data = list("response", "treat", "time", "id", "n.id", "n.obs"),
model.file = toe.jags2, DIC = FALSE, jags.seed = 1234,
parameters.to.save = c("pred_IN[1:2]", "pred_OUT"),
n.chain = 1, n.iter = 20000, n.burnin = 10000, n.thin = 4)
toe.mcmc2 <- as.mcmc(toe.fit2)
summary(toe.mcmc2)
setwd("D:/22fall/INFO550/1130")
